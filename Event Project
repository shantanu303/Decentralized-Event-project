// SPDX-License-Identifier: GPL-3.0

pragma solidity >= 0.5.0 < 0.9.0;

contract Eventcontract{
    struct Event{
        address organizer;
        string name;
        uint date;
        uint price;
        uint256 no;
        uint countticket;
        uint ticketremain;
    }
    mapping(uint=>Event) public events;
    mapping(address=>mapping(uint=>uint)) public tickets;
    uint public nextid;

function createrEvent(string memory name,uint date,uint price,uint no,uint countticket ) external{
    require (date>block.timestamp,"you can organize the in future");
    require(countticket>0,"if you are organizer then creater a more tickect");

     events[nextid] = Event(msg.sender,name, date, price,no,countticket,countticket);
     nextid++;
}
function buyticket(uint id,uint quantity) external payable
{
    require(events[id].date!=0,"event does not exist");
    require(events[id].date>block.timestamp,"event already occured");
    Event storage_event= events[id];
    require(msg.value==(_event.price*quantity),"ethere is not enough");
    require(_event.ticketremain>=quantity,"not enough ticket");
    _event.ticketremain-=quantity;
    tickets[msg.sender][id]+=quantity;
}
function transferticket(uint id, uint quantity,address to)external
{
    require(events[id].date!=0,"event does not exist");
    require(events[id].date>block.timestamp,"event already occured");
    require(tickets[msg.sender][id]>=quantity,"you do noy have engouth ticket");
    tickets[msg.sender][id]-=quantity;
    tickets[to][id]+=quantity;
}
}
